
[4mSequelize [Node: 4.4.7, CLI: 2.4.0, ORM: 4.0.0-1][24m

Loaded configuration file "database/config.js".
Using environment "development".
== 20160825031610-user-seeder: migrating =======
== 20160825031610-user-seeder: migrated (0.001s)
== 20160825044905-unnamed-seeder: migrating =======
{ [Function: Sequelize]
  asIs: [Function: literal],
  condition: [Function: where],
  version: '4.0.0-1',
  options: { hooks: {} },
  Utils: 
   { Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Object],
        Promise: [Circular],
        version: '3.4.2',
        map: [Object],
        using: [Function],
        delay: [Function],
        coroutine: [Object],
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Object],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Object],
        each: [Object],
        mapSeries: [Object],
        any: [Function],
        default: [Circular],
        Sequelize: [Circular] },
     _: 
      { [Function: lodash]
        templateSettings: [Object],
        after: [Function: after],
        ary: [Function: ary],
        assign: [Function],
        assignIn: [Function],
        assignInWith: [Function],
        assignWith: [Function],
        at: [Function],
        before: [Function: before],
        bind: [Object],
        bindAll: [Function],
        bindKey: [Object],
        castArray: [Function: castArray],
        chain: [Function: chain],
        chunk: [Function: chunk],
        compact: [Function: compact],
        concat: [Function: concat],
        cond: [Function: cond],
        conforms: [Function: conforms],
        constant: [Function: constant],
        countBy: [Function],
        create: [Function: create],
        curry: [Object],
        curryRight: [Object],
        debounce: [Function: debounce],
        defaults: [Function],
        defaultsDeep: [Function],
        defer: [Function],
        delay: [Function],
        difference: [Function],
        differenceBy: [Function],
        differenceWith: [Function],
        drop: [Function: drop],
        dropRight: [Function: dropRight],
        dropRightWhile: [Function: dropRightWhile],
        dropWhile: [Function: dropWhile],
        fill: [Function: fill],
        filter: [Function: filter],
        flatMap: [Function: flatMap],
        flatMapDeep: [Function: flatMapDeep],
        flatMapDepth: [Function: flatMapDepth],
        flatten: [Function: flatten],
        flattenDeep: [Function: flattenDeep],
        flattenDepth: [Function: flattenDepth],
        flip: [Function: flip],
        flow: [Function],
        flowRight: [Function],
        fromPairs: [Function: fromPairs],
        functions: [Function: functions],
        functionsIn: [Function: functionsIn],
        groupBy: [Function],
        initial: [Function: initial],
        intersection: [Function],
        intersectionBy: [Function],
        intersectionWith: [Function],
        invert: [Function],
        invertBy: [Function],
        invokeMap: [Function],
        iteratee: [Function: iteratee],
        keyBy: [Function],
        keys: [Function: keys],
        keysIn: [Function: keysIn],
        map: [Function: map],
        mapKeys: [Function: mapKeys],
        mapValues: [Function: mapValues],
        matches: [Function: matches],
        matchesProperty: [Function: matchesProperty],
        memoize: [Object],
        merge: [Function],
        mergeWith: [Function],
        method: [Function],
        methodOf: [Function],
        mixin: [Function: mixin],
        negate: [Function: negate],
        nthArg: [Function: nthArg],
        omit: [Function],
        omitBy: [Function: omitBy],
        once: [Function: once],
        orderBy: [Function: orderBy],
        over: [Function],
        overArgs: [Function],
        overEvery: [Function],
        overSome: [Function],
        partial: [Object],
        partialRight: [Object],
        partition: [Function],
        pick: [Function],
        pickBy: [Function: pickBy],
        property: [Function: property],
        propertyOf: [Function: propertyOf],
        pull: [Function],
        pullAll: [Function: pullAll],
        pullAllBy: [Function: pullAllBy],
        pullAllWith: [Function: pullAllWith],
        pullAt: [Function],
        range: [Function],
        rangeRight: [Function],
        rearg: [Function],
        reject: [Function: reject],
        remove: [Function: remove],
        rest: [Function: rest],
        reverse: [Function: reverse],
        sampleSize: [Function: sampleSize],
        set: [Function: set],
        setWith: [Function: setWith],
        shuffle: [Function: shuffle],
        slice: [Function: slice],
        sortBy: [Function],
        sortedUniq: [Function: sortedUniq],
        sortedUniqBy: [Function: sortedUniqBy],
        split: [Function: split],
        spread: [Function: spread],
        tail: [Function: tail],
        take: [Function: take],
        takeRight: [Function: takeRight],
        takeRightWhile: [Function: takeRightWhile],
        takeWhile: [Function: takeWhile],
        tap: [Function: tap],
        throttle: [Function: throttle],
        thru: [Function: thru],
        toArray: [Function: toArray],
        toPairs: [Function],
        toPairsIn: [Function],
        toPath: [Function: toPath],
        toPlainObject: [Function: toPlainObject],
        transform: [Function: transform],
        unary: [Function: unary],
        union: [Function],
        unionBy: [Function],
        unionWith: [Function],
        uniq: [Function: uniq],
        uniqBy: [Function: uniqBy],
        uniqWith: [Function: uniqWith],
        unset: [Function: unset],
        unzip: [Function: unzip],
        unzipWith: [Function: unzipWith],
        update: [Function: update],
        updateWith: [Function: updateWith],
        values: [Function: values],
        valuesIn: [Function: valuesIn],
        without: [Function],
        words: [Function: words],
        wrap: [Function: wrap],
        xor: [Function],
        xorBy: [Function],
        xorWith: [Function],
        zip: [Function],
        zipObject: [Function: zipObject],
        zipObjectDeep: [Function: zipObjectDeep],
        zipWith: [Function],
        entries: [Function],
        entriesIn: [Function],
        extend: [Function],
        extendWith: [Function],
        add: [Function],
        attempt: [Function],
        camelCase: [Function],
        capitalize: [Function: capitalize],
        ceil: [Function],
        clamp: [Function: clamp],
        clone: [Function: clone],
        cloneDeep: [Function: cloneDeep],
        cloneDeepWith: [Function: cloneDeepWith],
        cloneWith: [Function: cloneWith],
        conformsTo: [Function: conformsTo],
        deburr: [Function: deburr],
        defaultTo: [Function: defaultTo],
        divide: [Function],
        endsWith: [Function: endsWith],
        eq: [Function: eq],
        escape: [Function: escape],
        escapeRegExp: [Function: escapeRegExp],
        every: [Function: every],
        find: [Function],
        findIndex: [Function: findIndex],
        findKey: [Function: findKey],
        findLast: [Function],
        findLastIndex: [Function: findLast
Index],
        findLastKey: [Function: findLastKey],
        floor: [Function],
        forEach: [Function: forEach],
        forEachRight: [Function: forEachRight],
        forIn: [Function: forIn],
        forInRight: [Function: forInRight],
        forOwn: [Function: forOwn],
        forOwnRight: [Function: forOwnRight],
        get: [Function: get],
        gt: [Function],
        gte: [Function],
        has: [Function: has],
        hasIn: [Function: hasIn],
        head: [Function: head],
        identity: [Function: identity],
        includes: [Function: includes],
        indexOf: [Function: indexOf],
        inRange: [Function: inRange],
        invoke: [Function],
        isArguments: [Function: isArguments],
        isArray: [Function: isArray],
        isArrayBuffer: [Function],
        isArrayLike: [Function: isArrayLike],
        isArrayLikeObject: [Function: isArrayLikeObject],
        isBoolean: [Function: isBoolean],
        isBuffer: [Function: isBuffer],
        isDate: [Function],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isEqualWith: [Function: isEqualWith],
        isError: [Function: isError],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isInteger: [Function: isInteger],
        isLength: [Function: isLength],
        isMap: [Function],
        isMatch: [Function: isMatch],
        isMatchWith: [Function: isMatchWith],
        isNaN: [Function: isNaN],
        isNative: [Function: isNative],
        isNil: [Function: isNil],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isObjectLike: [Function: isObjectLike],
        isPlainObject: [Function: isPlainObject],
        isRegExp: [Function],
        isSafeInteger: [Function: isSafeInteger],
        isSet: [Function],
        isString: [Function: isString],
        isSymbol: [Function: isSymbol],
        isTypedArray: [Function],
        isUndefined: [Function: isUndefined],
        isWeakMap: [Function: isWeakMap],
        isWeakSet: [Function: isWeakSet],
        join: [Function: join],
        kebabCase: [Function],
        last: [Function: last],
        lastIndexOf: [Function: lastIndexOf],
        lowerCase: [Function],
        lowerFirst: [Function],
        lt: [Function],
        lte: [Function],
        max: [Function: max],
        maxBy: [Function: maxBy],
        mean: [Function: mean],
        meanBy: [Function: meanBy],
        min: [Function: min],
        minBy: [Function: minBy],
        stubArray: [Function: stubArray],
        stubFalse: [Function: stubFalse],
        stubObject: [Function: stubObject],
        stubString: [Function: stubString],
        stubTrue: [Function: stubTrue],
        multiply: [Function],
        nth: [Function: nth],
        noConflict: [Function: noConflict],
        noop: [Function: noop],
        now: [Function],
        pad: [Function: pad],
        padEnd: [Function: padEnd],
        padStart: [Function: padStart],
        parseInt: [Function: parseInt],
        random: [Function: random],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        repeat: [Function: repeat],
        replace: [Function: replace],
        result: [Function: result],
        round: [Function],
        runInContext: [Function: runInContext],
        sample: [Function: sample],
        size: [Function: size],
        snakeCase: [Function],
        some: [Function: some],
        sortedIndex: [Function: sortedIndex],
        sortedIndexBy: [Function: sortedIndexBy],
        sortedIndexOf: [Function: sortedIndexOf],
        sortedLastIndex: [Function: sortedLastIndex],
        sortedLastIndexBy: [Function: sortedLastIndexBy],
        sortedLastIndexOf: [Function: sortedLastIndexOf],
        startCase: [Function],
        startsWith: [Function: startsWith],
        subtract: [Function],
        sum: [Function: sum],
        sumBy: [Function: sumBy],
        template: [Function: template],
        times: [Function: times],
        toFinite: [Function: toFinite],
        toInteger: [Function: toInteger],
        toLength: [Function: toLength],
        toLower: [Function: toLower],
        toNumber: [Function: toNumber],
        toSafeInteger: [Function: toSafeInteger],
        toString: [Function: toString],
        toUpper: [Function: toUpper],
        trim: [Function: trim],
        trimEnd: [Function: trimEnd],
        trimStart: [Function: trimStart],
        truncate: [Function: truncate],
        unescape: [Function: unescape],
        uniqueId: [Function: uniqueId],
        upperCase: [Function],
        upperFirst: [Function],
        each: [Function: forEach],
        eachRight: [Function: forEachRight],
        first: [Function: head],
        VERSION: '4.15.0' },
     debug: [Function: bound disabled],
     deprecate: [Function: bound deprecate],
     warn: [Function: bound warn],
     getLogger: [Function],
     useInflection: [Function: useInflection],
     camelizeIf: [Function: camelizeIf],
     underscoredIf: [Function: underscoredIf],
     isPrimitive: [Function: isPrimitive],
     mergeDefaults: [Function: mergeDefaults],
     merge: [Function: merge],
     lowercaseFirst: [Function: lowercaseFirst],
     uppercaseFirst: [Function: uppercaseFirst],
     spliceStr: [Function: spliceStr],
     camelize: [Function: camelize],
     underscore: [Function: underscore],
     format: [Function: format],
     formatNamedParameters: [Function: formatNamedParameters],
     cloneDeep: [Function: cloneDeep],
     mapFinderOptions: [Function: mapFinderOptions],
     mapOptionFieldNames: [Function: mapOptionFieldNames],
     mapWhereFieldNames: [Function: mapWhereFieldNames],
     mapValueFieldNames: [Function: mapValueFieldNames],
     isColString: [Function: isColString],
     argsArePrimaryKeys: [Function: argsArePrimaryKeys],
     canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
     combineTableNames: [Function: combineTableNames],
     singularize: [Function: singularize],
     pluralize: [Function: pluralize],
     removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
     toDefaultValue: [Function: toDefaultValue],
     defaultValueSchemable: [Function: defaultValueSchemable],
     removeNullValuesFromHash: [Function: removeNullValuesFromHash],
     stack: [Function: stack],
     sliceArgs: [Function: sliceArgs],
     now: [Function: now],
     TICK_CHAR: '`',
     addTicks: [Function: addTicks],
     removeTicks: [Function: removeTicks],
     Fn: [Function: Fn],
     Col: [Function: Col],
     Cast: [Function: Cast],
     Literal: [Function: Literal],
     Json: [Function: Json],
     Where: [Function: Where],
     validateParameter: { [Function: check] check: [Circular], default: [Circular] } },
  Promise: 
   { [Function: Promise]
     TypeError: [Function: TypeError],
     RangeError: [Function: RangeError],
     CancellationError: [Function: SubError],
     TimeoutError: [Function: SubError],
     OperationalError: [Function: OperationalError],
     RejectionError: [Function: OperationalError],
     AggregateError: [Function: SubError],
     _peekContext: [Function],
     onPossiblyUnhandledRejection: [Function],
     onUnhandledRejectionHandled: [Function],
     longStackTraces: [Function],
     hasLongStackTraces: [Function],
     config: [Function],
     getNewLibraryCopy: [Function],
     is: [Function],
     fromCallback: [Function],
     fromNode: [Function],
     all: [Function],
     cast: [Function],
     fulfilled: [Function],
     resolve: [Function],
     rejected: [Function],
     reject: [Function],
     setScheduler: [Function],
     pending: [Function],
     defer: [Function],
     method: [Function],
     try: [Function],
     attempt: [Function],
     bind: [Function],
     PromiseInspection: [Function: PromiseInspection],
     join: { [Function] __original: [Function], __unwrap: [Function], __wrapped: true },
     Promise: [Circular],
     version: '3.4.2',
     map: { [Function] __original: [Function], __unwrap: [Function], __wrapped: true }
,
     using: [Function],
     delay: [Function],
     coroutine: { [Function] addYieldHandler: [Function] },
     spawn: [Function],
     promisify: [Function],
     promisifyAll: [Function],
     props: [Function],
     race: [Function],
     reduce: { [Function] __original: [Function], __unwrap: [Function], __wrapped: true },
     settle: [Function],
     some: [Function],
     _SomePromiseArray: [Function: SomePromiseArray],
     filter: { [Function] __original: [Function], __unwrap: [Function], __wrapped: true },
     each: { [Function] __original: [Function], __unwrap: [Function], __wrapped: true },
     mapSeries: 
      { [Function]
        __original: [Function: PromiseMapSeries],
        __unwrap: [Function],
        __wrapped: true },
     any: [Function],
     default: [Circular],
     Sequelize: [Circular] },
  QueryTypes: 
   { SELECT: 'SELECT',
     INSERT: 'INSERT',
     UPDATE: 'UPDATE',
     BULKUPDATE: 'BULKUPDATE',
     BULKDELETE: 'BULKDELETE',
     DELETE: 'DELETE',
     UPSERT: 'UPSERT',
     VERSION: 'VERSION',
     SHOWTABLES: 'SHOWTABLES',
     SHOWINDEXES: 'SHOWINDEXES',
     DESCRIBE: 'DESCRIBE',
     RAW: 'RAW',
     FOREIGNKEYS: 'FOREIGNKEYS' },
  Validator: 
   { version: '5.5.0',
     toDate: [Function: toDate],
     toFloat: [Function: toFloat],
     toInt: [Function: toInt],
     toBoolean: [Function: toBoolean],
     equals: [Function: equals],
     contains: [Function: contains],
     matches: [Function: matches],
     isEmail: [Function: isEmail],
     isURL: [Function: isURL],
     isMACAddress: [Function: isMACAddress],
     isIP: [Function: isIP],
     isFQDN: [Function: isFDQN],
     isBoolean: [Function: isBoolean],
     isAlpha: [Function: isAlpha],
     isAlphanumeric: [Function: isAlphanumeric],
     isNumeric: [Function: isNumeric],
     isLowercase: [Function: isLowercase],
     isUppercase: [Function: isUppercase],
     isAscii: [Function: isAscii],
     isFullWidth: [Function: isFullWidth],
     isHalfWidth: [Function: isHalfWidth],
     isVariableWidth: [Function: isVariableWidth],
     isMultibyte: [Function: isMultibyte],
     isSurrogatePair: [Function: isSurrogatePair],
     isInt: [Function: isInt],
     isFloat: [Function: isFloat],
     isDecimal: [Function: isDecimal],
     isHexadecimal: [Function: isHexadecimal],
     isDivisibleBy: [Function: isDivisibleBy],
     isHexColor: [Function: isHexColor],
     isJSON: [Function: isJSON],
     isNull: [Function: isNull],
     isLength: [Function: isLength],
     isByteLength: [Function: isByteLength],
     isUUID: [Function: isUUID],
     isMongoId: [Function: isMongoId],
     isDate: [Function: isDate],
     isAfter: [Function: isAfter],
     isBefore: [Function: isBefore],
     isIn: [Function: isIn],
     isCreditCard: [Function: isCreditCard],
     isISIN: [Function: isISIN],
     isISBN: [Function: isISBN],
     isMobilePhone: [Function: isMobilePhone],
     isCurrency: [Function: isCurrency],
     isISO8601: [Function],
     isBase64: [Function: isBase64],
     isDataURI: [Function: isDataURI],
     ltrim: [Function: ltrim],
     rtrim: [Function: rtrim],
     trim: [Function: trim],
     escape: [Function: escape],
     unescape: [Function: unescape],
     stripLow: [Function: stripLow],
     whitelist: [Function: whitelist],
     blacklist: [Function: blacklist],
     isWhitelisted: [Function: isWhitelisted],
     normalizeEmail: [Function: normalizeEmail],
     toString: [Function: toString],
     notNull: [Function],
     extend: [Function: extend],
     notEmpty: [Function: notEmpty],
     len: [Function: len],
     isUrl: [Function: isUrl],
     isIPv6: [Function: isIPv6],
     isIPv4: [Function: isIPv4],
     notIn: [Function: notIn],
     regex: [Function: regex],
     notRegex: [Function: notRegex],
     min: [Function: min],
     max: [Function: max],
     not: [Function: not],
     notContains: [Function: notContains],
     is: [Function: is] },
  Model: Model,
  DataTypes: 
   { ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [F
unction: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        INTEGER: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        BIGINT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object] },
     sqlite: 
      { DATE: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        NOW: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] } },
  ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
  STRING: 
   { [Function: STRING]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'STRING',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  CHAR: 
   { [Function: CHAR]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'CHAR',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  TEXT: 
   { [Function: TEXT]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'TEXT',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: false } },
  NUMBER: 
   { [Function: NUMBER]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'NUMBER',
     types: {} },
  INTEGER: 
   { [Function: INTEGER]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'INTEGER',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  BIGINT: 
   { [Function: BIGINT]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'BIGINT',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: false } },
  FLOAT: 
   { [Function: FLOAT]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'FLOAT',
     types: { mysql: [Object], sqlite: [Object], mssql: [Object] } },
  TIME: 
   { [Function: TIME]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'TIME',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  DATE: 
   { [Function: DATE]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'DATE',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  DATEONLY: 
   { [Function: DATEONLY]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     key: 'DATEONLY',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  BOOLEAN: 
   { [Function: BOOLEAN]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'BOOLEAN',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  NOW: 
   { [Function: NOW]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'NOW',
     types: {} },
  BLOB: 
   { [Function: BLOB]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'BLOB',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  DECIMAL: 
   { [Function: DECIMAL]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'DECIMAL',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  NUMERIC: 
   { [Function: DECIMAL]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'DECIMAL',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  UUID: 
   { [Function: UUID]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'UUID',
     types: 
      { postgres: [Object],
        mysql: false,
        sqlite: [Object],
        mssql: false } },
  UUIDV1: 
   { [Function: UUIDV1]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'UUIDV1',
     types: {} },
  UUIDV4: 
   { [Function: UUIDV4]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'UUIDV4',
     types: {} },
  HSTORE: 
   { [Function: HSTORE]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'HSTORE',
     types: { postgres: [Object] } },
  JSON: 
   { [Function: JSONTYPE]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'JSON',
     types: { postgres: [Object] } },
  JSONB: 
   { [Function: JSONB]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'JSONB',
     types: { postgres: [Object] } },
  VIRTUAL: 
   { [Function: VIRTUAL]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'VIRTUAL',
     types: {} },
  ARRAY: 
   { [Function: ARRAY]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'ARRAY',
     is: [Function: is],
     types: {} },
  NONE: 
   { [Function: VIRTUAL]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'VIRTUAL',
     types: {} },
  ENUM: 
   { [Function: ENUM]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'ENUM',
     types: { mysql: false, sqlite: false, mssql: false } },
  RANGE: 
   { [Function: RANGE]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'RANGE',
     types: { postgres: [Object] } },
  REAL: 
   { [Function: REAL]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'REAL',
     types: 
      { postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] } },
  DOUBLE: 
   { [Function: DOUBLE]
     super_: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     warn: [Function: warn],
     key: 'DOUBLE PRECISION',
     types: 
      { postgres: [Object],
        mysql: [Obje
