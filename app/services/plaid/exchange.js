/*
    Exchange public token generated by plaid-link on the client-side for a
    server-side access_token that is stored on the user's database row for
    future requests.
*/
module.exports = function(req, res, next) {
    var public_token = req.body.public_token;
    var returning = req.body.returning;

    // Exchange a public_token for a Plaid access_token
    req.plaid.exchangeToken(public_token, function(err, exchangeTokenRes) {
        if (err != null) { /* Handle Error */ }

        // This is your Plaid access token - store somewhere persistent
        // The access_token can be used to make Plaid API calls to
        // retrieve accounts and transactions
        var access_token = exchangeTokenRes.access_token;

        // Persist the access_token
        req.models.User.update({
            access_token: access_token
        }, {
            fields: ['access_token'],
            where: { id: req.user.id }
        }).then(function(user) {

            req.plaid.getConnectUser(access_token, function(error, response) {
                if (!response) {
                    return console.log('Not sure what happened here...');
                }

                if (error) {
                    return console.log('Plaid Error: ', error);
                }

                if (response.accounts) {
                    Promise.all(response.accounts.map(function(account) {
                        return req.models.PlaidAccount.upsertWithReturn({
                            where: {
                                plaid_id: account._id
                            },
                            defaults: req.models.PlaidAccount.fromPlaidObject(
                                account, req.user
                            )
                        });
                    })).then(function(accounts) {
                        if (!response.transactions) {
                            return res.json({
                                status: req.status.success,
                                data: (returning ? accounts : {
                                    updated: true
                                })
                            });
                        }

                        req.models.PlaidTransaction.bulkCreate(
                            req.models.PlaidTransaction.fromPlaidArray(
                                response.transactions, req.user
                            )
                        ).then(function(transactions) {
                            console.log('EXCHANGE: ', {
                                transactions: transactions,
                                accounts: accounts
                            });

                            return res.json({
                                status: req.status.success,
                                data: {
                                    accounts: accounts,
                                    transactions: transactions
                                }
                            });
                        });
                    });
                }
            });
        });
    });
};
